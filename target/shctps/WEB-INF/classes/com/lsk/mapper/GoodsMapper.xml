<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lsk.dao.GoodsMapper">
  <resultMap id="BaseResultMap" type="com.lsk.entity.Goods">
    <id column="gid" jdbcType="INTEGER" property="gid" />
    <result column="goodsname" jdbcType="VARCHAR" property="goodsname" />
    <result column="goodsimg" jdbcType="VARCHAR" property="goodsimg" />
    <result column="goodsprice" jdbcType="DECIMAL" property="goodsprice" />
    <result column="goodsdesc" jdbcType="VARCHAR" property="goodsdesc" />
    <result column="category" jdbcType="TINYINT" property="category" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="quality" jdbcType="VARCHAR" property="quality" />
    <result column="issuedate" jdbcType="DATE" property="issuedate" />
    <result column="duedate" jdbcType="DATE" property="duedate" />
    <result column="originalprice" jdbcType="DECIMAL" property="originalprice" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    gid, goodsname, goodsimg, goodsprice, goodsdesc, category, pid, state, quality, issuedate, 
    duedate, originalprice
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from goods
    where gid = #{gid,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultType="com.lsk.entity.Goods">
    select
    <include refid="Base_Column_List"></include>
    from goods
    where state=1
  </select>
  <select id="selectByPid" resultType="com.lsk.entity.Goods" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List"></include>
    from goods
    where pid=#{pid} order by issuedate asc
  </select>
  <select id="selectOrderByNewRelease" resultType="com.lsk.entity.Goods">
    select
    <include refid="Base_Column_List"></include>
    from goods
    order by issuedate asc limit 10
  </select>
  <select id="selectorderByOldRelease" resultType="com.lsk.entity.Goods">
    select
    <include refid="Base_Column_List"></include>
    from goods
    order by issuedate desc limit 10
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from goods
    where gid = #{gid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.lsk.entity.Goods">
    insert into goods (gid, goodsname, goodsimg, 
      goodsprice, goodsdesc, category, 
      pid, state, quality, 
      issuedate, duedate, originalprice
      )
    values (#{gid,jdbcType=INTEGER}, #{goodsname,jdbcType=VARCHAR}, #{goodsimg,jdbcType=VARCHAR}, 
      #{goodsprice,jdbcType=DECIMAL}, #{goodsdesc,jdbcType=VARCHAR}, #{category,jdbcType=TINYINT}, 
      #{pid,jdbcType=INTEGER}, #{state,jdbcType=TINYINT}, #{quality,jdbcType=VARCHAR}, 
      #{issuedate,jdbcType=DATE}, #{duedate,jdbcType=DATE}, #{originalprice,jdbcType=DECIMAL}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.lsk.entity.Goods">
    insert into goods
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="gid != null">
        gid,
      </if>
      <if test="goodsname != null">
        goodsname,
      </if>
      <if test="goodsimg != null">
        goodsimg,
      </if>
      <if test="goodsprice != null">
        goodsprice,
      </if>
      <if test="goodsdesc != null">
        goodsdesc,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="quality != null">
        quality,
      </if>
      <if test="issuedate != null">
        issuedate,
      </if>
      <if test="duedate != null">
        duedate,
      </if>
      <if test="originalprice != null">
        originalprice,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="gid != null">
        #{gid,jdbcType=INTEGER},
      </if>
      <if test="goodsname != null">
        #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsimg != null">
        #{goodsimg,jdbcType=VARCHAR},
      </if>
      <if test="goodsprice != null">
        #{goodsprice,jdbcType=DECIMAL},
      </if>
      <if test="goodsdesc != null">
        #{goodsdesc,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=TINYINT},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="quality != null">
        #{quality,jdbcType=VARCHAR},
      </if>
      <if test="issuedate != null">
        #{issuedate,jdbcType=DATE},
      </if>
      <if test="duedate != null">
        #{duedate,jdbcType=DATE},
      </if>
      <if test="originalprice != null">
        #{originalprice,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.lsk.entity.Goods">
    update goods
    <set>
      <if test="goodsname != null">
        goodsname = #{goodsname,jdbcType=VARCHAR},
      </if>
      <if test="goodsimg != null">
        goodsimg = #{goodsimg,jdbcType=VARCHAR},
      </if>
      <if test="goodsprice != null">
        goodsprice = #{goodsprice,jdbcType=DECIMAL},
      </if>
      <if test="goodsdesc != null">
        goodsdesc = #{goodsdesc,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        category = #{category,jdbcType=TINYINT},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="quality != null">
        quality = #{quality,jdbcType=VARCHAR},
      </if>
      <if test="issuedate != null">
        issuedate = #{issuedate,jdbcType=DATE},
      </if>
      <if test="duedate != null">
        duedate = #{duedate,jdbcType=DATE},
      </if>
      <if test="originalprice != null">
        originalprice = #{originalprice,jdbcType=DECIMAL},
      </if>
    </set>
    where gid = #{gid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lsk.entity.Goods">
    update goods
    set goodsname = #{goodsname,jdbcType=VARCHAR},
      goodsimg = #{goodsimg,jdbcType=VARCHAR},
      goodsprice = #{goodsprice,jdbcType=DECIMAL},
      goodsdesc = #{goodsdesc,jdbcType=VARCHAR},
      category = #{category,jdbcType=TINYINT},
      pid = #{pid,jdbcType=INTEGER},
      state = #{state,jdbcType=TINYINT},
      quality = #{quality,jdbcType=VARCHAR},
      issuedate = #{issuedate,jdbcType=DATE},
      duedate = #{duedate,jdbcType=DATE},
      originalprice = #{originalprice,jdbcType=DECIMAL}
    where gid = #{gid,jdbcType=INTEGER}
  </update>
</mapper>